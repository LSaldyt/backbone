#!/usr/bin/env python3
import subprocess, time, sys, os

updateInterval = 5
waitInterval   = 1
appDir         = 'app'

def get_sha():
    output = subprocess.check_output(['git', 'rev-parse', 'HEAD'])
    return output.decode('utf-8').strip()

def get_app_sha():
    if not os.path.isdir(appDir):
        return None
    os.chdir(appDir)
    try:
        return get_sha()
    finally:
        os.chdir('..')

def update(url):
    if not os.path.isdir(appDir):
        subprocess.call(['git', 'clone', url, appDir])
    os.chdir(appDir)
    try:
        print('Pulling app')
        subprocess.call(['git', 'pull'])        # pull app's code
        subprocess.call(['bash', 'install.sh']) # run app
        return get_sha()
    finally:
        os.chdir('..')
        print('Pulling backbone')
        subprocess.call(['git', 'pull']) # pull backbone's code

def main(args):
    url    = args[0]
    handle = None
    app_sha = get_app_sha()
    sha     = get_sha()
    last    = time.time()

    print('Waiting.', end='')
    while True:
        current = time.time()
        if current - last > updateInterval:
            last = current
            print('Checking for updates..')
            new_app_sha = update(url)
            new_sha = get_sha()
            if app_sha != new_app_sha:
                print('Updating app')
                # If our app has updated, restart it
                print('Re-running..')
                if handle is not None:
                    print('Killing..')
                    handle.kill()
                handle = subprocess.Popen(['bash', 'run.sh'])
                app_sha = new_app_sha
            elif sha != new_sha:
                print('Updating backbone')
                # If backbone has updated, restart
                subprocess.call(['./backbone'] + args)
                return 0
            print('Waiting.', end='')
        else:
            print('.', end='', flush=True)
            time.sleep(waitInterval)
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
